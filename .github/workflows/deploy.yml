name: CI/CD

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write   # required for OIDC
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Authenticate to GCP via Workload Identity Federation
      - name: Auth to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          version: ">= 471.0.0"
          

name: Deploy to GCP

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_REGION: us-central1
  BACKEND_SERVICE_NAME: finsight-backend
  FRONTEND_SERVICE_NAME: finsight-frontend

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        cd backend
        pip install -r requirements.txt
    
    - name: Run backend tests
      run: |
        cd backend
        python -m pytest tests/ || echo "No tests found"
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Run frontend tests
      run: |
        cd frontend
        npm test -- --watchAll=false || echo "No tests found"
    
    - name: Build frontend
      run: |
        cd frontend
        npm run build

  deploy-backend:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v2
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}
    
    - name: Configure Docker for GCP
      run: |
        gcloud auth configure-docker
    
    - name: Build and push backend image
      run: |
        cd backend
        docker build -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/finsight-backend:${{ github.sha }} .
        docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/finsight-backend:${{ github.sha }}
    
    - name: Deploy backend to Cloud Run
      run: |
        gcloud run deploy ${{ env.BACKEND_SERVICE_NAME }} \
          --image gcr.io/${{ secrets.GCP_PROJECT_ID }}/finsight-backend:${{ github.sha }} \
          --platform managed \
          --region ${{ env.GCP_REGION }} \
          --allow-unauthenticated \
          --port 8000 \
          --memory 1Gi \
          --cpu 1 \
          --max-instances 10 \
          --set-env-vars="GOOGLE_CLIENT_PROJECT_ID=${{ secrets.GCP_PROJECT_ID }}" \
          --set-env-vars="DATABASE_URL=${{ secrets.DATABASE_URL }}" \
          --set-env-vars="JWT_SECRET=${{ secrets.JWT_SECRET }}" \
          --set-env-vars="GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" \
          --set-env-vars="GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" \
          --set-env-vars="OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}"
    
    - name: Get backend URL
      id: backend-url
      run: |
        BACKEND_URL=$(gcloud run services describe ${{ env.BACKEND_SERVICE_NAME }} --region=${{ env.GCP_REGION }} --format='value(status.url)')
        echo "url=$BACKEND_URL" >> $GITHUB_OUTPUT
        echo "Backend deployed to: $BACKEND_URL"

  deploy-frontend:
    needs: [test, deploy-backend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v2
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}
    
    - name: Configure Docker for GCP
      run: |
        gcloud auth configure-docker
    
    - name: Build and push frontend image
      run: |
        cd frontend
        docker build -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/finsight-frontend:${{ github.sha }} .
        docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/finsight-frontend:${{ github.sha }}
    
    - name: Deploy frontend to Cloud Run
      run: |
        gcloud run deploy ${{ env.FRONTEND_SERVICE_NAME }} \
          --image gcr.io/${{ secrets.GCP_PROJECT_ID }}/finsight-frontend:${{ github.sha }} \
          --platform managed \
          --region ${{ env.GCP_REGION }} \
          --allow-unauthenticated \
          --port 80 \
          --memory 512Mi \
          --cpu 1 \
          --max-instances 5 \
          --set-env-vars="REACT_APP_API_URL=${{ needs.deploy-backend.outputs.url }}"
    
    - name: Get frontend URL
      run: |
        FRONTEND_URL=$(gcloud run services describe ${{ env.FRONTEND_SERVICE_NAME }} --region=${{ env.GCP_REGION }} --format='value(status.url)')
        echo "Frontend deployed to: $FRONTEND_URL"

  deploy-database:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v2
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}
    
    - name: Create Cloud SQL instance if not exists
      run: |
        gcloud sql instances create finsight-db \
          --database-version=POSTGRES_15 \
          --tier=db-f1-micro \
          --region=${{ env.GCP_REGION }} \
          --root-password=${{ secrets.DB_ROOT_PASSWORD }} \
          --storage-type=HDD \
          --storage-size=10GB \
          --backup-start-time=02:00 \
          --maintenance-window-day=SUN \
          --maintenance-window-hour=02 \
          --quiet || echo "Instance already exists"
    
    - name: Create database if not exists
      run: |
        gcloud sql databases create finsight \
          --instance=finsight-db \
          --quiet || echo "Database already exists"
    
    - name: Create user if not exists
      run: |
        gcloud sql users create finsight \
          --instance=finsight-db \
          --password=${{ secrets.DB_PASSWORD }} \
          --quiet || echo "User already exists" 
