name: CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  GCP_REGION: asia-south1

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Frontend deps (skip tests)
        run: |
          cd frontend
          npm ci
          echo "✅ Skipping frontend tests"

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Backend deps (skip tests)
        run: |
          cd backend
          pip install -r requirements.txt
          echo "✅ Skipping backend tests"

  deploy-backend:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    permissions:
      id-token: write
      contents: read
    outputs:
      backend_url: ${{ steps.geturl.outputs.url }}
    steps:
      - uses: actions/checkout@v4

      # OIDC auth
      - name: Auth to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2

      # Ensure AR repo exists, then configure Docker only for AR
      - name: Setup Artifact Registry
        run: |
          gcloud artifacts repositories create finsight-repo \
            --repository-format=docker \
            --location=${{ env.GCP_REGION }} \
            --description="FinSight Docker repository" \
            --quiet || echo "Repository already exists"
          gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev --quiet

      - uses: docker/setup-buildx-action@v3

      # Compose a single, correct tag (prevents newline/splitting bugs)
      - name: Compose image tag
        run: |
          IMAGE="${{ env.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/finsight-repo/finsight-backend:${{ github.sha }}"
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV
          echo "Using tag: [$IMAGE]"

      # Build & push backend image
      - name: Build and push backend image
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          platforms: linux/amd64
          push: true
          tags: ${{ env.IMAGE }}

      # Deploy to Cloud Run
      - name: Deploy backend to Cloud Run
        run: |
          gcloud run deploy finsight-backend \
            --image "${{ env.IMAGE }}" \
            --platform managed \
            --region ${{ env.GCP_REGION }} \
            --allow-unauthenticated \
            --service-account=run-finsight@${{ secrets.GCP_PROJECT_ID }}.iam.gserviceaccount.com \
            --set-env-vars="DATABASE_URL=${{ secrets.DATABASE_URL }}" \
            --set-env-vars="JWT_SECRET=${{ secrets.JWT_SECRET }}" \
            --set-env-vars="GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" \
            --set-env-vars="GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" \
            --set-env-vars="OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" \
            --set-env-vars="GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}" \
            --set-env-vars="GOOGLE_CLIENT_PROJECT_ID=${{ secrets.GCP_PROJECT_ID }}" \
            --set-env-vars="GCP_REGION=${{ env.GCP_REGION }}"

      # Output backend URL for the frontend job
      - name: Get backend URL
        id: geturl
        run: |
          URL=$(gcloud run services describe finsight-backend --region=${{ env.GCP_REGION }} --format='value(status.url)')
          echo "url=$URL" >> $GITHUB_OUTPUT
          echo "Backend URL: $URL"

  deploy-frontend:
    needs: [test, deploy-backend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Build frontend
        env:
          # If Hosting rewrites /api/** to Cloud Run, this can be unused,
          # but passing it is fine for runtime config if your app reads it.
          REACT_APP_API_URL: ${{ needs.deploy-backend.outputs.backend_url }}
          REACT_APP_GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
        run: |
          cd frontend
          npm ci
          npm run build

      # Firebase Hosting deploy (uses your service account JSON secret)
      - name: Deploy to Firebase
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
          projectId: ${{ secrets.FIREBASE_PROJECT_ID }}
          channelId: live
